{
  "id": 41834,
  "name": "Layer 7 Registration Flow",
  "userId": 82921,
  "accountId": 59413,
  "createdDate": "2020-11-10T04:52:30Z",
  "steps": [
    {
      "id": 445221,
      "onSuccess": [
        "updateSubscriptionStateApproved"
      ],
      "onFailure": [],
      "name": "buildApproveSubData",
      "type": "script",
      "properties": {
        "body": "const body = \n{\n  'subData' : \n  {\n  'state' : 'APPROVED',\n  'description': steps.readTriggerActionAndPrepareData.actionMessage\n  }\n}\n\ndone(body)"
      }
    },
    {
      "id": 445387,
      "onSuccess": [
        "updateSubscriptionStateActive"
      ],
      "onFailure": [],
      "name": "buildSubscriptionActive",
      "type": "script",
      "properties": {
        "body": "const body = \n{\n  'subData' : \n  {\n  'state' : 'ACTIVE'\n  }\n}\n\ndone(body)"
      }
    },
    {
      "id": 445381,
      "onSuccess": [
        "updateSubscriptionStateRejected"
      ],
      "onFailure": [],
      "name": "buildSubscriptionRejected",
      "type": "script",
      "properties": {
        "body": "const body = \n{\n  'subData' : \n  {\n  'state' : 'REJECTED',\n  'description': steps.readTriggerActionAndPrepareData.actionMessage\n  }\n}\n\ndone(body)"
      }
    },
    {
      "id": 445403,
      "onSuccess": [
        "updateSubscriptionStateUnsubscribeFailed"
      ],
      "onFailure": [
        "end"
      ],
      "name": "buildSubscriptionUnsubscribeFailed",
      "type": "script",
      "properties": {
        "body": "done({\n  'state': 'FAILED_TO_UNSUBSCRIBE'\n})"
      }
    },
    {
      "id": 445401,
      "onSuccess": [
        "updateSubscriptionStateUnsubscribed"
      ],
      "onFailure": [],
      "name": "buildUnsubscribeData",
      "type": "script",
      "properties": {
        "body": "done({\n  'state': 'UNSUBSCRIBED',\n  'description': steps.readTriggerActionAndPrepareData.actionMessage\n})"
      }
    },
    {
      "id": 445220,
      "onSuccess": [
        "buildApproveSubData"
      ],
      "onFailure": [
        "checkActionRejected"
      ],
      "name": "checkActionApprove",
      "type": "filter",
      "properties": {
        "body": "const action = steps.readTriggerActionAndPrepareData.action;\n\ndone(action.toLowerCase() == \"approved\")"
      }
    },
    {
      "id": 445222,
      "onSuccess": [
        "buildSubscriptionRejected"
      ],
      "onFailure": [
        "checkActionUnsubsribeInitiated"
      ],
      "name": "checkActionRejected",
      "type": "filter",
      "properties": {
        "body": "const action = trigger.args.subscription && trigger.args.subscription.action;\n\ndone(action.toLowerCase() == \"rejected\");"
      }
    },
    {
      "id": 445380,
      "onSuccess": [
        "deleteLayer7Application"
      ],
      "onFailure": [],
      "name": "checkActionUnsubsribeInitiated",
      "type": "filter",
      "properties": {
        "body": "const action = trigger.args.subscription && trigger.args.subscription.action;\n\ndone(action.toLowerCase() == \"unsubscribeinitiated\");"
      }
    },
    {
      "id": 445384,
      "onSuccess": [
        "buildSubscriptionActive"
      ],
      "onFailure": [
        "end"
      ],
      "name": "createLayer7Application",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.prepareLayer7Data.applicationsUrl}",
        "headers": "${steps.readTriggerActionAndPrepareData.layer7token}",
        "body": "${steps.prepareClientLayer7Application.body}",
        "method": "POST"
      }
    },
    {
      "id": 445400,
      "onSuccess": [
        "buildUnsubscribeData"
      ],
      "onFailure": [
        "buildSubscriptionUnsubscribeFailed"
      ],
      "name": "deleteLayer7Application",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.prepareLayer7Data.applicationByIdUrl}",
        "headers": "${steps.readTriggerActionAndPrepareData.layer7token}",
        "method": "DELETE"
      }
    },
    {
      "id": 445216,
      "onSuccess": [],
      "onFailure": [],
      "name": "end",
      "type": "script",
      "properties": {
        "body": "done(false);"
      }
    },
    {
      "id": 445224,
      "onSuccess": [
        "prepareClientLayer7Application"
      ],
      "onFailure": [
        "end"
      ],
      "name": "getApiServerConsumerInstance",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.apiServerConsumerInstanceUrl}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "method": "GET"
      }
    },
    {
      "id": 445399,
      "onSuccess": [],
      "onFailure": [],
      "name": "getApiServerConsumerInstanceDetails",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.apiServerConsumerInstanceUrl}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "method": "GET"
      }
    },
    {
      "id": 445217,
      "onSuccess": [
        "readTriggerActionAndPrepareData"
      ],
      "onFailure": [
        "end"
      ],
      "name": "getAxwayAccessToken",
      "type": "httpRequest",
      "properties": {
        "url": "https://login.axway.com/auth/realms/Broker/protocol/openid-connect/token",
        "headers": "${steps.prepAxwayAccessTokenRequest.headers}",
        "body": "${steps.prepAxwayAccessTokenRequest.form}",
        "method": "POST"
      }
    },
    {
      "id": 445219,
      "onSuccess": [
        "checkActionApprove"
      ],
      "onFailure": [],
      "name": "getConsumerEmail",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.platformGetUserUrl}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "method": "GET"
      }
    },
    {
      "id": 445226,
      "onSuccess": [
        "prepAxwayAccessTokenRequest"
      ],
      "onFailure": [
        "end"
      ],
      "name": "getLayer7AccessToken",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.prepareLayer7Data.authUrl}",
        "headers": "${steps.prepareLayer7Data.authHeaders}",
        "body": "${steps.prepareLayer7Data.authFormData}",
        "method": "POST",
        "form": ""
      }
    },
    {
      "id": 445377,
      "onSuccess": [
        "createLayer7Application"
      ],
      "onFailure": [],
      "name": "prepareClientLayer7Application",
      "type": "script",
      "properties": {
        "body": "const consumerInstance = steps.getApiServerConsumerInstance.response.body;\n\nlet subscriptionId = trigger.args.subscription.id;\n\ndone({\n  \"body\": {\n    \"Uuid\": steps.prepareLayer7Data.layer7ApplicationId,\n    \"Name\": `ucs-${subscriptionId}`,\n    \"OrganizationUuid\": `${config.layer7SubscriptionsOrgId}`,\n    \"ApiIds\": {\n      \"results\": [consumerInstance.attributes.apiId]\n    },\n    \"OauthType\": consumerInstance.attributes.authenticationType === 'OAUTH2' ? 'confidential': null\n  }\n});"
      }
    },
    {
      "id": 445225,
      "onSuccess": [
        "getLayer7AccessToken"
      ],
      "onFailure": [],
      "name": "prepareLayer7Data",
      "type": "script",
      "properties": {
        "body": "let subscriptionId = trigger.args.subscription.id;\n//need to build an UUID\nconst layer7ApplicationId = subscriptionId.substring(0, 8) + \"-\" + subscriptionId.substring(9, 13) + \"-1\" + subscriptionId.substring(15, 18) + \"-a\" + subscriptionId.substring(20, 23) + \"-\" + subscriptionId.substring(24, 32) + subscriptionId.substring(0, 4);\n\ndone({\n  'layer7ApplicationId': layer7ApplicationId,\n  'applicationsUrl': `${config.layer7PortalUrl}/apim/Applications`,\n  'applicationByIdUrl': `${config.layer7PortalUrl}/apim/Applications('${layer7ApplicationId}')`,\n  'authUrl': `${config.layer7PortalUrl}/auth/oauth/v2/token`,\n  'authHeaders': {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  'authFormData': `client_id=${config.layer7ClientId}&grant_type=client_credentials&scope=${config.layer7ClientScope}&client_secret=${config.layer7ClientSecret}`\n});"
      }
    },
    {
      "id": 445215,
      "onSuccess": [
        "getAxwayAccessToken"
      ],
      "onFailure": [
        "end"
      ],
      "name": "prepAxwayAccessTokenRequest",
      "type": "script",
      "properties": {
        "body": "\ndone({\n  'headers': { \n      Authorization: 'Basic ' + CE.b64(config.axwayClientId + ':' + config.axwayClientSecret),\n      'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  form: 'grant_type=client_credentials'\n});\n"
      }
    },
    {
      "id": 445405,
      "onSuccess": [
        "sendEmail"
      ],
      "onFailure": [],
      "name": "prepSubscriptionEmailNotification",
      "type": "script",
      "properties": {
        "body": "// Configure these three params\nconst subject = 'RE: Subscription Notification';\nconst recipient = steps.getConsumerEmail.response.body.result && steps.getConsumerEmail.response.body.result.email;\nconst catalogItemId = steps.readTriggerActionAndPrepareData.catalogItemId;\nconst catalogItemName = steps.readTriggerActionAndPrepareData.catalogItemName;\nconst catalogItemLink = `${steps.readTriggerActionAndPrepareData.apicentralUrl}/catalog/explore/${catalogItemId}`;\n\nconst action = steps.readTriggerActionAndPrepareData.action;\nlet message = '';\n\nif (action.toLowerCase() == \"approved\") {\nconst apiKey = steps.createLayer7Application.response.body.ApiKey;\nconst keySecret = steps.createLayer7Application.response.body.KeySecret;\nconst magMasterKey = steps.createLayer7Application.response.body.MagMasterKey;\n message = `<br>Subscription created for Catalog Item: <a href= ${catalogItemLink}> ${catalogItemName} </a>`;\n let consumerInstanceDetails = steps.getApiServerConsumerInstance.response.body;\n  if (consumerInstanceDetails.attributes.authenticationType === 'OAUTH2') {\n    message += `<br>Client ID: <b>${apiKey}</b>` ;\n\t  message += `<br>Client secret: <b>${keySecret}</b>` ;\n  } else {\n    message += `<br>API Key: <b>${apiKey}</b>` ;\n\t  message += `<br>Key Secret: <b>${keySecret}</b>` ;\n  }\n\tmessage += `<br>Mag Master Key: <b>${magMasterKey}</b><br>` ;\n\t\n\tif (consumerInstanceDetails.spec.description) {\n  \tmessage += `<br><b>Catalog item description:</b>` ;\n  \tmessage += `<br><div style=\"color:blue\"'>${consumerInstanceDetails.spec.description}</div>` ;\n\t}\n\t\n\tif (consumerInstanceDetails.spec.documentation) {\n  \tmessage += `<br><b>Catalog item documentation:</b>` ;\n  \tmessage += `<br><div style=\"color:blue\"'>${consumerInstanceDetails.spec.documentation}</div>` ;\n\t}\n\t\n} else if(action.toLowerCase() == 'unsubscribeinitiated') {\n   message = `<br>Successfully unsubscribed for Catalog Item: <a href= ${catalogItemLink}> ${steps.readTriggerActionAndPrepareData.catalogItemName} </a>`;\n} else if (action.toLowerCase() == 'rejected') {\n  message =`<br>Subscription for Catalog Item: <a href= ${catalogItemLink}> ${catalogItemName} </a> is not approved.`\n}\n\t\n\t\n\tconst body = {\n  \"Body\": {\n    \"Content\": `${message}`,\n    \"ContentType\": \"HTML\"\n  },\n  \"Importance\": \"0\",\n  \"InferenceClassification\": \"Focused\",\n  \"IsDeliveryReceiptRequested\": false,\n  \"IsRead\": false,\n  \"IsReadReceiptRequested\": false,\n  \"Subject\": subject,\n  \"ToRecipients\": [\n    {\n      \"EmailAddress\": {\n        \"Address\": recipient\n      }\n    }\n  ]\n}\n\t\n\ndone({body});\n"
      }
    },
    {
      "id": 445218,
      "onSuccess": [
        "getConsumerEmail"
      ],
      "onFailure": [],
      "name": "readTriggerActionAndPrepareData",
      "type": "script",
      "properties": {
        "body": "let subscriptionId;\nlet catalogItemId;\nlet catalogItemName;\nlet action;\nlet actionMessage;\nlet consumerUserId;\nconst apicentralUrl = config.apiCentralUrl ? config.apiCentralUrl : 'https://apicentral.axway.com';\n\nif(trigger.args.catalogItem) {\n   catalogItemId = trigger.args.catalogItem.id;\n   catalogItemName = trigger.args.catalogItem.name;\n}\n\nconst relationships = trigger.args.catalogItem.relationships;\n\nlet environmentName;\nlet environmentId;\nlet consumerInstanceId;\nlet consumerInstanceName;\n\nif(relationships) {\n  environmentName = relationships.find(rel => rel.type == 'API_SERVER_ENVIRONMENT_NAME').value;\n  environmentId = relationships.find(rel => rel.type == 'API_SERVER_ENVIRONMENT_ID').value;\n  consumerInstanceId = relationships.find(rel => rel.type == 'API_SERVER_CONSUMER_INSTANCE_ID').value;\n  consumerInstanceName = relationships.find(rel => rel.type == 'API_SERVER_CONSUMER_INSTANCE_NAME').value;\n}\n\n\nif(trigger.args.subscription) {\n   subscriptionId = trigger.args.subscription.id;\n   action = trigger.args.subscription.action;\n   actionMessage = trigger.args.subscription.message;\n   consumerUserId = trigger.args.subscription.userId;\n}\n\n\nconst ucsHeaders = {\n  'X-Axway-Tenant-Id': config.axwayTenantId,\n  'Authorization': `Bearer ${steps.getAxwayAccessToken.response.body.access_token}`,\n  'Content-Type': 'application/json'\n}\n\nconst statesURL = `${apicentralUrl}/api/unifiedCatalog/v1/catalogItems/${catalogItemId}/subscriptions/${subscriptionId}/states`;\n\nconst platformGetUserUrl = `https://platform.axway.com/api/v1/user/${consumerUserId}`;\n\nconst apiServerConsumerInstanceUrl = `${apicentralUrl}/apis/management/v1alpha1/environments/${environmentName}/consumerinstances/${consumerInstanceName}`;\n\nlet data = {\n  \"catalogItemId\" : catalogItemId,\n  \"catalogItemName\": catalogItemName,\n  \"subscriptionId\" : subscriptionId,\n  \"action\": action,\n  \"actionMessage\": actionMessage,\n  statesURL,\n  ucsHeaders,\n  consumerUserId,\n  platformGetUserUrl,\n  environmentName,\n  environmentId,\n  consumerInstanceId,\n  consumerInstanceName,\n  apiServerConsumerInstanceUrl,\n  apicentralUrl,\n  layer7token: {\n      'Authorization': `Bearer ${steps.getLayer7AccessToken.response.body.access_token}`\n  }\n};\n\ndone(data);"
      }
    },
    {
      "id": 445406,
      "onSuccess": [],
      "onFailure": [],
      "name": "sendEmail",
      "type": "elementRequest",
      "properties": {
        "api": "/messages",
        "elementInstanceId": "${config.outlookEmail}",
        "body": "${steps.prepSubscriptionEmailNotification.body}",
        "method": "POST"
      }
    },
    {
      "id": 445388,
      "onSuccess": [
        "prepSubscriptionEmailNotification"
      ],
      "onFailure": [
        "end"
      ],
      "name": "updateSubscriptionStateActive",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.statesURL}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "body": "${steps.buildSubscriptionActive.subData}",
        "method": "POST"
      }
    },
    {
      "id": 445383,
      "onSuccess": [
        "getApiServerConsumerInstance"
      ],
      "onFailure": [],
      "name": "updateSubscriptionStateApproved",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.statesURL}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "body": "${steps.buildApproveSubData.subData}",
        "method": "POST"
      }
    },
    {
      "id": 445223,
      "onSuccess": [
        "prepSubscriptionEmailNotification"
      ],
      "onFailure": [
        "end"
      ],
      "name": "updateSubscriptionStateRejected",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.statesURL}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "body": "${steps.buildSubscriptionRejected.subData}",
        "method": "POST"
      }
    },
    {
      "id": 445402,
      "onSuccess": [
        "prepSubscriptionEmailNotification"
      ],
      "onFailure": [
        "end"
      ],
      "name": "updateSubscriptionStateUnsubscribed",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.statesURL}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "body": "${steps.buildUnsubscribeData}",
        "method": "POST"
      }
    },
    {
      "id": 445404,
      "onSuccess": [
        "prepSubscriptionEmailNotification"
      ],
      "onFailure": [
        "end"
      ],
      "name": "updateSubscriptionStateUnsubscribeFailed",
      "type": "httpRequest",
      "properties": {
        "url": "${steps.readTriggerActionAndPrepareData.statesURL}",
        "headers": "${steps.readTriggerActionAndPrepareData.ucsHeaders}",
        "body": "${steps.buildSubscriptionUnsubscribeFailed}",
        "method": "POST"
      }
    }
  ],
  "triggers": [
    {
      "id": 37944,
      "onSuccess": [
        "prepareLayer7Data"
      ],
      "onFailure": [],
      "type": "manual",
      "async": true,
      "name": "trigger",
      "properties": {}
    }
  ],
  "engine": "v3",
  "active": true,
  "singleThreaded": false,
  "debugLoggingEnabled": false,
  "configuration": [
    {
      "id": 82472,
      "key": "apiCentralUrl",
      "name": "apiCentralUrl",
      "type": "value",
      "required": false
    },
    {
      "id": 82476,
      "key": "axwayClientId",
      "name": "axwayClientId",
      "type": "value",
      "required": true
    },
    {
      "id": 82470,
      "key": "axwayClientSecret",
      "name": "axwayClientSecret",
      "type": "value",
      "required": true
    },
    {
      "id": 82473,
      "key": "axwayTenantId",
      "name": "axwayTenantId",
      "type": "value",
      "required": true
    },
    {
      "id": 82466,
      "key": "layer7ClientId",
      "name": "layer7ClientId",
      "type": "value",
      "required": true
    },
    {
      "id": 82468,
      "key": "layer7ClientScope",
      "name": "layer7ClientScope",
      "type": "value",
      "required": true
    },
    {
      "id": 82467,
      "key": "layer7ClientSecret",
      "name": "layer7ClientSecret",
      "type": "value",
      "required": true
    },
    {
      "id": 82465,
      "key": "layer7PortalUrl",
      "name": "layer7PortalUrl",
      "type": "value",
      "required": true
    },
    {
      "id": 82469,
      "key": "layer7SubscriptionsOrgId",
      "name": "layer7SubscriptionsOrgId",
      "type": "value",
      "required": true
    },
    {
      "id": 82477,
      "key": "outlookEmail",
      "name": "outlookEmail",
      "type": "elementInstance",
      "required": true
    }
  ]
}